version: "3"

services:
  # if needed
  spid-certs:
    image: psmiraglia/spid-compliant-certificates
    container_name: satosa-certs
    volumes:
        - ./project/pki:/tmp/certs:rw
    entrypoint: |
        spid-compliant-certificates generator
        --key-size 4096
        --common-name "BlockChainLab SPID Proxy"
        --days 7300
        --entity-id https://spid.blockchainlab.it
        --locality-name Cosenza
        --org-id "VATIT-09293740966"
        --org-name "BlockChainLab S.r.L."
        --sector private
        --key-out /tmp/certs/privkey.pem
        --crt-out /tmp/certs/cert.pem

  satosa-mongo:
    image: mongo
    container_name: satosa-mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: satosa
      MONGO_INITDB_ROOT_PASSWORD: thatpassword
    ports:
      - 27017:27017
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - mongodbdata:/data/db
    networks:
      - satosa

  satosa-mongo-express:
    image: mongo-express
    container_name: satosa-mongo-express
    restart: always
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: satosa
      ME_CONFIG_BASICAUTH_PASSWORD: thatpassword
      ME_CONFIG_MONGODB_ADMINUSERNAME: satosa
      ME_CONFIG_MONGODB_ADMINPASSWORD: thatpassword
      ME_CONFIG_MONGODB_URL: mongodb://satosa:thatpassword@satosa-mongo:27017/
    networks:
      - satosa

  # remove if use a nginx frontend
  satosa-statics:
    build:
      context: .
      dockerfile: ./docker/satosa-statics/Dockerfile
    container_name: satosa-statics
    expose:
      - 9999
    ports:
      - "9999:9999"
    volumes:
      - satosa-saml2saml_certs:/satosa_pki
      - satosa-saml2saml_statics:/satosa_statics
    networks:
      - satosa

  satosa-saml2spid:
    build:
      context: .
      dockerfile: ./docker/satosa-saml2spid/Dockerfile
    container_name: satosa-saml2spid
    depends_on:
      - satosa-mongo
    environment:
      - THAT=thing
    expose:
      - 10000
    ports:
      - "10000:10000"
    networks:
      - satosa
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - satosa-saml2saml_certs:/satosa_pki
      - satosa-saml2saml_conf:/satosa_proxy
      - satosa-saml2saml_logs:/satosa_logs

  # TODO
  #satosa-nginx:
    #image: nginx:1.19-alpine
    #ports:
      #- "80:80"
      #- "443:443"
    #volumes:
      #- ./docker/gateway/satosa.conf:/etc/nginx/conf.d/default.conf
      #- satosa-saml2saml_statics:/satosa/static
      #- ./docker/gateway/example.key:/etc/nginx/certs/certificate.key
      #- ./docker/gateway/example.crt:/etc/nginx/certs/certificate.crt
    #depends_on:
      #- satosa-front
      #- satosa-back
    #networks:
      #- satosa
  
  satosa-nginx:
    image: nginx:1.15-alpine
    container_name: satosa-nginx
    restart: unless-stopped
    volumes:
      - ./docker/gateway/satosa.conf:/etc/nginx/conf.d/default.conf
      - ./docker/gateway/log:/var/log/nginx
      - ./project/nginx/metadata/:/usr/share/nginx/metadata/
      - ./project/nginx/assets/:/usr/share/nginx/assets/
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
      - satosa-saml2saml_statics:/satosa_statics
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - satosa

  # uncomment if needed
  #spid-saml-check:
    #image: italia/spid-saml-check
    #ports:
    #  - "8080:8080"
    #networks:
    #  - satosa
    #volumes:
      #- "./docker/spid-saml-check-config/idp.json:/spid-saml-check/spid-validator/config/idp.json:ro"
      #- "./docker/spid-saml-check-config/idp_demo.json:/spid-saml-check/spid-validator/config/idp_demo.json:ro"
      #- "./docker/spid-saml-check-config/server.json:/spid-saml-check/spid-validator/config/server.json:ro"
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  mongodbdata:
  satosa-saml2saml_certs:
    external: true
  satosa-saml2saml_statics:
    external: true
  satosa-saml2saml_conf:
    external: true
  satosa-saml2saml_logs:
    external: true

networks:
  satosa:
